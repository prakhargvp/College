// Header Files
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<malloc.h>
// Preprocessor Directives Constant
#define PRIME_MAX 10000000
#define TCASE_MAX 100
#define INTMAX 6 
#define REINPUT_MAX 5 

int checkChar(char ch){
    /* Checks if it is an alphabet */
    int count=0;
    if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')){
        count=1;
    }else if(ch >= '0' && ch <= '9'){
        count=2;
    }else{
        count=0;
    }
   return count;
}
int scan(char fspe[],void *add){
	char temp[120];
	int i,chk,alp,num,spcl,flag,count=0;
	do{	
		count++;
		flag=1;
		alp=num=spcl=0;
		strcpy(temp,"");	
		scanf("%[^\n]",temp);
		for(i=0;i<strlen(temp);i++){
			chk = checkChar(temp[i]);
			if(chk==1){
				alp++;
			}else if(chk==2){
				num++;
			}else{
				spcl++;
			}
		}
		// For intercept access modifiers

		//printf("Input : %s , count : %d , Reinput COunt : %d \n",temp,count,REINPUT_MAX);
		//printf("length : %d \n",strlen(temp));
		if((alp==0 && spcl==0) && (
		    strstr(fspe,"d")!=NULL || (strstr(fspe,"l")!=NULL && strstr(fspe,"u")!=NULL) || 
		    strstr(fspe,"%u")!=NULL)
		   ){
			if(num<=INTMAX){
				*(int*)add = atoi(temp);
			}else{
				printf("Not in Range ( Input > %d digits)\n",INTMAX);
				flag=0;
				printf("Re-Enter Value : ");
			}
		}else if(strlen(temp)==1 && strstr(fspe,"%c")!=NULL){
			*(char*)add = temp[0];
		}else if(strstr(fspe,"%s")!=NULL){
			strcpy((char*)add,temp);
		}else{
			flag=0;
			printf(" Not Valid Input : %s \n",temp);
			printf(" Alphabets : %d ; Digits : %d ; Special Characters : %d \n",alp,num,spcl);
			printf("Re-Enter Value : ");
		}
		getchar();
	}while(count<REINPUT_MAX && ( strlen(temp)==0 || flag==0 ));
return 0;
}

// End of scan file data

// Primo no File
int primeNo(int arr[]){
        long int i,j,flag=0,count=0;
        for(i=2;i<=PRIME_MAX;i++){
                if(arr[i]==0){
                        for(j=i*2;j<=PRIME_MAX;j=j+i){
                                arr[j] = 1;
                        }
                        if(arr[i]==0){
                                count++;
                        }
                }
                arr[i] = count;
        }
return count;
}
// End of prime No
// Chk lucky file
int check(int arr[],int len){
	int i;
	for(i=0;i<len-1;i++){
		if(arr[i]>=arr[i+1]){
		}else{
			return 0;
		}
	}
return 1;
}
// End of Chk lucky file

// inttoarr
int inttoarr(int num,int arr[]){
	int i=0;
	while(num>0)
	{
		arr[i++] = num%10;
		num /= 10;
	}
return i;
}
// End of inttoarr
// maxdiff
int maxDiff(int arr[],int len){
	int i,diff=0,maxdiff=0;
	for(i=0;i<len-1;i++){
		diff = arr[i]-arr[i+1];
		if( diff > maxdiff){
			maxdiff = diff; 
		}
	}
return maxdiff;
}
// End of maxdiff
// sop
int SOP(int arr[],int len){
	int i,sum=0;
	for(i=0;i<len;i++){
		sum += arr[i];
	}
return sum;
}
// end of sop
// question 1
int ques1(){
	int *arr;
	long int i,T,N,M,pnum;	
	float prob;
	arr = (int*)malloc(PRIME_MAX*sizeof(int));	
	memset(arr,0,PRIME_MAX*sizeof(int));
	primeNo(arr);
	scan("%ld",&T);
	for(i=0;i<T;i++){
		scan("%ld",&N);
		scan("%ld",&M);
		if(M>=N)
		{
			pnum = arr[M]-arr[N];
			prob = (float)pnum/(M-N+1);
			printf("%.6f\n",prob);
		}else{
			printf("Invalide Range : M Should be greater then N\n");
		}
	}
return 0;
}
// End of question 1
// question 2
int ques3(){
	int T,*num,i,arr[20],len;
	// Input
	scan("%d",&T);		
	num = (int*)malloc(T*sizeof(int));
	for(i=0;i<T;i++){
		scan("%d",&num[i]);
	}
	// output
	for(i=0;i<T;i++){
		len = inttoarr(num[i],arr);
		if(check(arr,len)==1){	
			printf("%d,",maxDiff(arr,len));	
			printf("%d\n",SOP(arr,len));	
		}else{
			printf("NA\n");	
		}
	}
return 0;
}
// END of question 2
// Main Calling Function
int main(int argc,char *argv[]){
	int ch=0,imode,omode;
	FILE *fin=NULL,*fout=NULL;
	char filein[100],fileout[100];
	if(argc > 1){
		strcpy(filein,argv[1]);
		if(fopen(filein,"r")==NULL){
			printf("Invalid Input File\n");
			return 0;
		}else{
			imode=1;
		}
		if(argc > 2){
			strcpy(fileout,argv[2]);
			omode=1;
		}else{
			omode=0;	
		}
	}else{
		printf("Select the Mode : \n");
		do{
			printf("Input Mode (0-Screen , 1-File) : ");
			scan("%d",&imode);
			if(imode==1){
				do{
				printf("Enter File : ");
				scan("%s",filein);
				}while(fopen(filein,"r")==NULL);
			}
		}while(imode!=0 && imode!=1);
		do{
			printf("Output Mode (0-Screen , 1-File) : ");
			scan("%d",&omode);
			if(omode==1){
				printf("Enter File : ");
				scan("%s",fileout);
			}
		}while(omode!=0 && omode!=1);
	}
	printf("Enter the Choice (1-Ques1 , 2-Ques2) : ");
	scan(" %d",&ch);
	if(imode==1){
		fin=freopen(filein,"r",stdin);
	}
	if(omode==1){
		fout=freopen(fileout,"w",stdout);
	}

	if(ch==1){
		ques1();
	}else if(ch==2){
		ques3();
	}

	if(imode==1){
		fclose(fin);
	}
	if(omode==1){
		fclose(fout);
	}

return 0;
}
